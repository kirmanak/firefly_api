/*
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below. 
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: james@firefly-iii.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RuleAction {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    /// The type of thing this action will do. A limited set is possible.
    #[serde(rename = "type")]
    pub _type: Type,
    /// The accompanying value the action will set, change or update. Can be empty, but for some types this value is mandatory.
    #[serde(rename = "value")]
    pub value: Option<String>,
    /// Order of the action
    #[serde(rename = "order", skip_serializing_if = "Option::is_none")]
    pub order: Option<i32>,
    /// If the action is active.
    #[serde(rename = "active", skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    /// When true, other actions will not be fired after this action has fired.
    #[serde(rename = "stop_processing", skip_serializing_if = "Option::is_none")]
    pub stop_processing: Option<bool>,
}

impl RuleAction {
    pub fn new(_type: Type, value: Option<String>) -> RuleAction {
        RuleAction {
            id: None,
            created_at: None,
            updated_at: None,
            _type,
            value,
            order: None,
            active: None,
            stop_processing: None,
        }
    }
}

/// The type of thing this action will do. A limited set is possible.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "user_action")]
    UserAction,
    #[serde(rename = "set_category")]
    SetCategory,
    #[serde(rename = "clear_category")]
    ClearCategory,
    #[serde(rename = "set_budget")]
    SetBudget,
    #[serde(rename = "clear_budget")]
    ClearBudget,
    #[serde(rename = "add_tag")]
    AddTag,
    #[serde(rename = "remove_tag")]
    RemoveTag,
    #[serde(rename = "remove_all_tags")]
    RemoveAllTags,
    #[serde(rename = "set_description")]
    SetDescription,
    #[serde(rename = "append_description")]
    AppendDescription,
    #[serde(rename = "prepend_description")]
    PrependDescription,
    #[serde(rename = "set_source_account")]
    SetSourceAccount,
    #[serde(rename = "set_destination_account")]
    SetDestinationAccount,
    #[serde(rename = "set_notes")]
    SetNotes,
    #[serde(rename = "append_notes")]
    AppendNotes,
    #[serde(rename = "prepend_notes")]
    PrependNotes,
    #[serde(rename = "clear_notes")]
    ClearNotes,
    #[serde(rename = "link_to_bill")]
    LinkToBill,
    #[serde(rename = "convert_withdrawal")]
    ConvertWithdrawal,
    #[serde(rename = "convert_deposit")]
    ConvertDeposit,
    #[serde(rename = "convert_transfer")]
    ConvertTransfer,
}

